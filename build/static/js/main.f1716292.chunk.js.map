{"version":3,"sources":["SearchComponent/ChannelCard.js","Utils/Utils.js","SubsListComponent/SubsListComponent.js","SearchComponent/SearchComponent.js","ViewSubsComponent/ViewSubsContent.js","App.js","index.js"],"names":["ChannelCard","props","undefined","subsHandler","authorId","author","subCount","description","onClick","Utils","a","fetch","json","instanceList","finalInstanceList","instance","monitor","push","Math","floor","random","length","SubsListComponent","state","subs","currentSubs","this","subsArray","sub","utils","continueTrying","controller","AbortController","setTimeout","abort","getRandomInstance","signal","channelDetails","setState","console","log","className","map","React","Component","SearchComponent","input","searchResults","search","bind","event","preventDefault","searchResult","slice","onSubmit","placeholder","onChange","target","value","type","result","ViewSubsContent","subsLatestContent","key","content","currentContent","currentContentSorted","sort","b","published","reverse","video","href","videoId","rel","title","savedSubs","localStorage","getItem","setItem","JSON","stringify","parse","window","onunload","App","navigateTo","searchComponent","viewSubsContent","subsComponent","channel","command","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1716292.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction ChannelCard(props) {\n    \n    let subs = props.subsHandler(\"\", \"getCurrentSubs\");\n    if (subs[props.authorId] !== undefined) {\n        return (\n            <div key={props.authorId}>\n                <h3>{props.author}</h3>\n                <p>Subs : {props.subCount}</p>\n                <p>{props.description}</p>\n                <button onClick={() => {\n                    props.subsHandler({\n                        authorId: props.authorId\n                    }, \"deleteSub\");\n                }}>Unsubscribe</button>\n            </div> \n        );\n    }\n\n    return (\n        <div key={props.authorId}>\n            <h3>{props.author}</h3>\n            <p>Subs : {props.subCount}</p>\n            <p>{props.description}</p>\n            <button onClick={() => {\n                props.subsHandler({\n                    author: props.author,\n                    authorId: props.authorId,\n                    description: props.description\n                }, \"addSubs\");\n            }}>Subscribe</button>\n        </div>\n    );\n}\n\nexport default ChannelCard;","class Utils {\n    async getRandomInstance() {\n        //gets the list of instances ordered by health.\n        const instanceList = await (await fetch('https://api.invidious.io/instances.json?sort_by=health')).json();\n        let finalInstanceList = [];\n        for (let instance of instanceList) {\n            if (instance[1].monitor !== null) {\n                finalInstanceList.push(instance[0]);\n            }\n        }\n\n        return finalInstanceList[Math.floor(Math.random()*finalInstanceList.length)];\n    }\n}\n\nexport default Utils;\n\n\n\n\n","import React from 'react';\nimport ChannelCard from '../SearchComponent/ChannelCard';\nimport Utils from '../Utils/Utils';\n\nclass SubsListComponent extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            subs: []\n        }\n    }\n\n    async componentDidMount() {\n        let currentSubs = this.props.subsHandler(\"\", \"getCurrentSubs\");\n        let subsArray = [];\n        for (let sub in currentSubs) {\n            let utils = new Utils();\n            let continueTrying = true;\n            while (continueTrying) {\n                try {\n                    const controller = new AbortController();\n                    setTimeout(() => controller.abort(), 2000);\n                    const instance = await utils.getRandomInstance();\n                    const channelDetails = await (await fetch(\n                        `https://${instance}/api/v1/channels/${sub}`,\n                        { signal: controller.signal }\n                    )).json();\n                    \n                    subsArray.push(channelDetails);\n                    continueTrying = false;\n\n                    \n                } catch {\n\n                }\n            }\n\n            this.setState({subs: subsArray});      \n        }\n      \n    }\n\n\n    render() {\n        console.log(this.state.subs);\n        return (<div className=\"contentArea\">\n            {(this.state.subs).map(sub => {\n                return <ChannelCard \n                author={sub.author} \n                subCount={sub.subCount}\n                authorId={sub.authorId}\n                description={sub.description}\n                subsHandler={this.props.subsHandler} /> \n            })}\n        </div>);\n    }\n}\n\nexport default SubsListComponent;","import React from 'react';\nimport Utils from '../Utils/Utils';\nimport ChannelCard from './ChannelCard';\n\nclass SearchComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: \"\",\n            searchResults: []\n        };\n        this.search = this.search.bind(this);\n    }\n\n    async search(event) {\n        event.preventDefault();          \n        let utils = new Utils();\n        let continueTrying = true;\n\n        while (continueTrying) {\n            try {\n                const instance = await utils.getRandomInstance();\n                const controller = new AbortController();\n                setTimeout(() => controller.abort(), 2000);\n                const searchResult = await (await fetch(\n                    `https://${instance}/api/v1/search?q=${this.state.input}&type=channel&sort_by=relevance`,\n                    { signal: controller.signal }\n                )).json();\n\n                this.setState({searchResults: searchResult.slice(0,4)});\n                continueTrying = false;\n            } catch {\n                \n            }\n        }\n    }\n    \n\n    render() {\n        return (\n            <div className=\"contentArea\">\n              <form onSubmit={this.search}>\n                <input \n                placeholder=\"Search channel...\"\n                onChange={input => {\n                    this.setState({input: input.target.value});\n                }}\n                /> \n                <input\n                type=\"submit\"\n                value=\"Search\"\n                />\n              </form>\n              \n              {(this.state.searchResults).map(result => {\n                  return <ChannelCard \n                  author={result.author} \n                  subCount={result.subCount}\n                  authorId={result.authorId}\n                  description={result.description}\n                  subsHandler={this.props.subsHandler} /> \n              })}\n\n  \n                   \n            </div>\n        );\n    }\n}\n\nexport default SearchComponent;","import React from 'react';\nimport Utils from '../Utils/Utils';\n\nclass ViewSubsContent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            subsLatestContent: [],\n        };\n    }\n\n    async componentDidMount() {\n        let currentSubs = this.props.subsHandler(\"\", \"getCurrentSubs\");\n        \n        for (let key in currentSubs) {\n            let utils = new Utils();\n            let continueTrying = true;\n            while (continueTrying) {\n                try {\n                    const controller = new AbortController();\n                    setTimeout(() => controller.abort(), 2000);\n                    const instance = await utils.getRandomInstance();\n                    const content = await (await fetch(\n                        `https://${instance}/api/v1/channels/latest/${key}`,\n                        { signal: controller.signal }\n                    )).json();\n\n                    \n        \n                    let currentContent = this.state.subsLatestContent;\n                    currentContent.push(...content.slice(0,4));\n                    let currentContentSorted = currentContent.sort(( a, b ) =>\n                    {\n                      if ( a.published === b.published ) return 0;\n                      return ( a.published > b.published ) ? 1 : -1;\n                    }).reverse();\n                    \n                    this.setState({subsLatestContent: currentContentSorted});\n                    continueTrying = false;\n                } catch {\n                    \n                }\n            }\n\n        }\n\n    }\n\n\n    render() {\n    \n        return (\n            <div className=\"contentArea\">\n                {(this.state.subsLatestContent).map(video => {\n                    return <div key={video.videoId}>\n                        <a \n                        href={\"https://www.youtube-nocookie.com/embed/\" + video.videoId}\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                        >{video.title} ~ {video.author}</a>\n                    </div>;\n                })}\n            </div>\n        );\n    }\n\n}\n\nexport default ViewSubsContent;","import React from 'react';\nimport SubsListComponent from './SubsListComponent/SubsListComponent';\nimport SearchComponent from './SearchComponent/SearchComponent';\nimport ViewSubsContent from './ViewSubsComponent/ViewSubsContent';\nimport './style.css';\n\n\nvar savedSubs = {};\n\nif (localStorage.getItem('subs') === null) {\n  localStorage.setItem('subs', JSON.stringify(savedSubs));\n} else {\n  savedSubs = JSON.parse(localStorage.getItem('subs'));\n  console.log(savedSubs);\n} \n\n\nwindow.onunload = () => {\n  localStorage.setItem('subs', JSON.stringify(savedSubs));\n}\n\nclass App extends React.Component {    \n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            subs: savedSubs,\n            navigateTo: {\n                searchComponent: false,\n                viewSubsContent: false,\n                subsComponent: false\n            }\n        };\n\n        this.subsHandler = this.subsHandler.bind(this);\n    \n    }\n\n    subsHandler(channel, command) {\n        let currentSubs = this.state.subs;\n\n        if (currentSubs[channel.authorId] === undefined && command === \"addSubs\") {\n            currentSubs[channel.authorId] = {\n                author: channel.author,\n                description: channel.description\n            };\n            this.setState({subs: currentSubs});\n            savedSubs = this.state.subs;\n\n        } else if (command === \"deleteSub\") {\n            delete currentSubs[channel.authorId];\n            this.setState({subs: currentSubs});\n            savedSubs = this.state.subs;\n\n        } else if (command === \"getCurrentSubs\") {\n            return currentSubs;\n            \n        }\n    }\n\n    render() {\n        return (\n            <>\n                <div id=\"titleSection\">\n                    <h1><span id=\"followOnly\">FollowOnly</span> for YouTube</h1>\n                    <p>Frontend Client for watching content made by channels you follow and nothing else.</p>\n                </div>\n                <div className=\"wrapper\">\n                    <button className=\"navButton\" onClick={() => {\n                        this.setState({navigateTo: {\n                            searchComponent: false,\n                            viewSubsContent: true,\n                            subsComponent: false\n                        }});\n                    }}>View Feed</button>\n                    <button className=\"navButton\" onClick={() => {\n                        this.setState({navigateTo: {\n                            searchComponent: true,\n                            viewSubsContent: false,\n                            subsComponent: false\n                        }});\n                    }}>Search Channels</button>\n                    <button className=\"navButton\" onClick={() => {\n                        this.setState({navigateTo: {\n                            searchComponent: false,\n                            viewSubsContent: false,\n                            subsComponent: true\n                        }});\n                    }}>Subbed Channels</button>\n                </div>\n\n                {(() => {\n                    if ((this.state.navigateTo).searchComponent === true) {\n                        return <SearchComponent subsHandler={this.subsHandler}/>\n                    }\n                })()}\n\n                {(() => {\n                    if ((this.state.navigateTo).viewSubsContent === true) {\n                        return <ViewSubsContent subsHandler={this.subsHandler}/>\n                    }\n                })()}\n\n                {(() => {\n                    if ((this.state.navigateTo).subsComponent === true) {\n                        return <SubsListComponent subsHandler={this.subsHandler}/>\n                    }\n                })()}   \n            </>\n        ); \n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}